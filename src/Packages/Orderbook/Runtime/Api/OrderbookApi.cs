/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using Immutable.Orderbook.Client;
using Immutable.Orderbook.Model;

namespace Immutable.Orderbook.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderbookApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersRequest"> (optional)</param>
        /// <returns>CancelOrders200Response</returns>
        CancelOrders200Response CancelOrders(CancelOrdersRequest? cancelOrdersRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersRequest"> (optional)</param>
        /// <returns>ApiResponse of CancelOrders200Response</returns>
        ApiResponse<CancelOrders200Response> CancelOrdersWithHttpInfo(
            CancelOrdersRequest? cancelOrdersRequest = default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersOnChainRequest"> (optional)</param>
        /// <returns>CancelOrdersOnChain200Response</returns>
        CancelOrdersOnChain200Response CancelOrdersOnChain(
            CancelOrdersOnChainRequest? cancelOrdersOnChainRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersOnChainRequest"> (optional)</param>
        /// <returns>ApiResponse of CancelOrdersOnChain200Response</returns>
        ApiResponse<CancelOrdersOnChain200Response> CancelOrdersOnChainWithHttpInfo(
            CancelOrdersOnChainRequest? cancelOrdersOnChainRequest = default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListingRequest"> (optional)</param>
        /// <returns>CreateListing200Response</returns>
        CreateListing200Response CreateListing(CreateListingRequest? createListingRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListingRequest"> (optional)</param>
        /// <returns>ApiResponse of CreateListing200Response</returns>
        ApiResponse<CreateListing200Response> CreateListingWithHttpInfo(
            CreateListingRequest? createListingRequest = default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillOrderRequest"> (optional)</param>
        /// <returns>FulfillOrder200Response</returns>
        FulfillOrder200Response FulfillOrder(FulfillOrderRequest? fulfillOrderRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of FulfillOrder200Response</returns>
        ApiResponse<FulfillOrder200Response> FulfillOrderWithHttpInfo(
            FulfillOrderRequest? fulfillOrderRequest = default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareListingRequest"> (optional)</param>
        /// <returns>PrepareListing200Response</returns>
        PrepareListing200Response PrepareListing(PrepareListingRequest? prepareListingRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareListingRequest"> (optional)</param>
        /// <returns>ApiResponse of PrepareListing200Response</returns>
        ApiResponse<PrepareListing200Response> PrepareListingWithHttpInfo(
            PrepareListingRequest? prepareListingRequest = default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareOrderCancellationsRequest"> (optional)</param>
        /// <returns>PrepareOrderCancellations200Response</returns>
        PrepareOrderCancellations200Response PrepareOrderCancellations(
            PrepareOrderCancellationsRequest? prepareOrderCancellationsRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareOrderCancellationsRequest"> (optional)</param>
        /// <returns>ApiResponse of PrepareOrderCancellations200Response</returns>
        ApiResponse<PrepareOrderCancellations200Response> PrepareOrderCancellationsWithHttpInfo(
            PrepareOrderCancellationsRequest? prepareOrderCancellationsRequest = default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletAddress"></param>
        /// <param name="contractAddress"></param>
        /// <returns>TokenBalance200Response</returns>
        TokenBalance200Response TokenBalance(string walletAddress, string contractAddress);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletAddress"></param>
        /// <param name="contractAddress"></param>
        /// <returns>ApiResponse of TokenBalance200Response</returns>
        ApiResponse<TokenBalance200Response> TokenBalanceWithHttpInfo(string walletAddress, string contractAddress);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderbookApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOrders200Response</returns>
        Task<CancelOrders200Response> CancelOrdersAsync(CancelOrdersRequest? cancelOrdersRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOrders200Response)</returns>
        Task<ApiResponse<CancelOrders200Response>> CancelOrdersWithHttpInfoAsync(
            CancelOrdersRequest? cancelOrdersRequest = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersOnChainRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOrdersOnChain200Response</returns>
        Task<CancelOrdersOnChain200Response> CancelOrdersOnChainAsync(
            CancelOrdersOnChainRequest? cancelOrdersOnChainRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersOnChainRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOrdersOnChain200Response)</returns>
        Task<ApiResponse<CancelOrdersOnChain200Response>> CancelOrdersOnChainWithHttpInfoAsync(
            CancelOrdersOnChainRequest? cancelOrdersOnChainRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateListing200Response</returns>
        Task<CreateListing200Response> CreateListingAsync(CreateListingRequest? createListingRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateListing200Response)</returns>
        Task<ApiResponse<CreateListing200Response>> CreateListingWithHttpInfoAsync(
            CreateListingRequest? createListingRequest = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillOrder200Response</returns>
        Task<FulfillOrder200Response> FulfillOrderAsync(FulfillOrderRequest? fulfillOrderRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillOrder200Response)</returns>
        Task<ApiResponse<FulfillOrder200Response>> FulfillOrderWithHttpInfoAsync(
            FulfillOrderRequest? fulfillOrderRequest = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrepareListing200Response</returns>
        Task<PrepareListing200Response> PrepareListingAsync(PrepareListingRequest? prepareListingRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrepareListing200Response)</returns>
        Task<ApiResponse<PrepareListing200Response>> PrepareListingWithHttpInfoAsync(
            PrepareListingRequest? prepareListingRequest = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareOrderCancellationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrepareOrderCancellations200Response</returns>
        Task<PrepareOrderCancellations200Response> PrepareOrderCancellationsAsync(
            PrepareOrderCancellationsRequest? prepareOrderCancellationsRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareOrderCancellationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrepareOrderCancellations200Response)</returns>
        Task<ApiResponse<PrepareOrderCancellations200Response>> PrepareOrderCancellationsWithHttpInfoAsync(
            PrepareOrderCancellationsRequest? prepareOrderCancellationsRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletAddress"></param>
        /// <param name="contractAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenBalance200Response</returns>
        Task<TokenBalance200Response> TokenBalanceAsync(string walletAddress, string contractAddress,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletAddress"></param>
        /// <param name="contractAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenBalance200Response)</returns>
        Task<ApiResponse<TokenBalance200Response>> TokenBalanceWithHttpInfoAsync(string walletAddress,
            string contractAddress, CancellationToken cancellationToken = default);

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderbookApi : IOrderbookApiSync, IOrderbookApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OrderbookApi : IDisposable, IOrderbookApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderbookApi" /> class.
        ///     **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        ///     It's better to reuse the
        ///     <see
        ///         href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">
        ///         HttpClient
        ///         and HttpClientHandler
        ///     </see>
        ///     .
        /// </summary>
        /// <returns></returns>
        public OrderbookApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderbookApi" /> class.
        ///     **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        ///     It's better to reuse the
        ///     <see
        ///         href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">
        ///         HttpClient
        ///         and HttpClientHandler
        ///     </see>
        ///     .
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OrderbookApi(string basePath)
        {
            Configuration = Orderbook.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = Orderbook.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderbookApi" /> class using Configuration object.
        ///     **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        ///     It's better to reuse the
        ///     <see
        ///         href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">
        ///         HttpClient
        ///         and HttpClientHandler
        ///     </see>
        ///     .
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OrderbookApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = Orderbook.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = Orderbook.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderbookApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OrderbookApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = Orderbook.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersRequest"> (optional)</param>
        /// <returns>CancelOrders200Response</returns>
        public CancelOrders200Response CancelOrders(CancelOrdersRequest? cancelOrdersRequest = default)
        {
            var localVarResponse = CancelOrdersWithHttpInfo(cancelOrdersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersRequest"> (optional)</param>
        /// <returns>ApiResponse of CancelOrders200Response</returns>
        public ApiResponse<CancelOrders200Response> CancelOrdersWithHttpInfo(
            CancelOrdersRequest? cancelOrdersRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cancelOrdersRequest;


            // make the HTTP request
            var localVarResponse = Client.Post<CancelOrders200Response>("/v1/ts-sdk/orderbook/cancelOrders",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CancelOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOrders200Response</returns>
        public async Task<CancelOrders200Response> CancelOrdersAsync(CancelOrdersRequest? cancelOrdersRequest = default,
            CancellationToken cancellationToken = default)
        {
            var task = CancelOrdersWithHttpInfoAsync(cancelOrdersRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Orderbook.Client.ApiResponse<CancelOrders200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOrders200Response)</returns>
        public async Task<ApiResponse<CancelOrders200Response>> CancelOrdersWithHttpInfoAsync(
            CancelOrdersRequest? cancelOrdersRequest = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cancelOrdersRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<CancelOrders200Response>("/v1/ts-sdk/orderbook/cancelOrders",
                localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CancelOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersOnChainRequest"> (optional)</param>
        /// <returns>CancelOrdersOnChain200Response</returns>
        public CancelOrdersOnChain200Response CancelOrdersOnChain(
            CancelOrdersOnChainRequest? cancelOrdersOnChainRequest = default)
        {
            var localVarResponse = CancelOrdersOnChainWithHttpInfo(cancelOrdersOnChainRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersOnChainRequest"> (optional)</param>
        /// <returns>ApiResponse of CancelOrdersOnChain200Response</returns>
        public ApiResponse<CancelOrdersOnChain200Response> CancelOrdersOnChainWithHttpInfo(
            CancelOrdersOnChainRequest? cancelOrdersOnChainRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cancelOrdersOnChainRequest;


            // make the HTTP request
            var localVarResponse =
                Client.Post<CancelOrdersOnChain200Response>("/v1/ts-sdk/orderbook/cancelOrdersOnChain",
                    localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CancelOrdersOnChain", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersOnChainRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOrdersOnChain200Response</returns>
        public async Task<CancelOrdersOnChain200Response> CancelOrdersOnChainAsync(
            CancelOrdersOnChainRequest? cancelOrdersOnChainRequest = default,
            CancellationToken cancellationToken = default)
        {
            var task = CancelOrdersOnChainWithHttpInfoAsync(cancelOrdersOnChainRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Orderbook.Client.ApiResponse<CancelOrdersOnChain200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelOrdersOnChainRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOrdersOnChain200Response)</returns>
        public async Task<ApiResponse<CancelOrdersOnChain200Response>> CancelOrdersOnChainWithHttpInfoAsync(
            CancelOrdersOnChainRequest? cancelOrdersOnChainRequest = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cancelOrdersOnChainRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<CancelOrdersOnChain200Response>(
                "/v1/ts-sdk/orderbook/cancelOrdersOnChain", localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CancelOrdersOnChain", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListingRequest"> (optional)</param>
        /// <returns>CreateListing200Response</returns>
        public CreateListing200Response CreateListing(CreateListingRequest? createListingRequest = default)
        {
            var localVarResponse = CreateListingWithHttpInfo(createListingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListingRequest"> (optional)</param>
        /// <returns>ApiResponse of CreateListing200Response</returns>
        public ApiResponse<CreateListing200Response> CreateListingWithHttpInfo(
            CreateListingRequest? createListingRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createListingRequest;


            // make the HTTP request
            var localVarResponse = Client.Post<CreateListing200Response>("/v1/ts-sdk/orderbook/createListing",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CreateListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateListing200Response</returns>
        public async Task<CreateListing200Response> CreateListingAsync(
            CreateListingRequest? createListingRequest = default, CancellationToken cancellationToken = default)
        {
            var task = CreateListingWithHttpInfoAsync(createListingRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Orderbook.Client.ApiResponse<CreateListing200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateListing200Response)</returns>
        public async Task<ApiResponse<CreateListing200Response>> CreateListingWithHttpInfoAsync(
            CreateListingRequest? createListingRequest = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createListingRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<CreateListing200Response>("/v1/ts-sdk/orderbook/createListing",
                localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("CreateListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillOrderRequest"> (optional)</param>
        /// <returns>FulfillOrder200Response</returns>
        public FulfillOrder200Response FulfillOrder(FulfillOrderRequest? fulfillOrderRequest = default)
        {
            var localVarResponse = FulfillOrderWithHttpInfo(fulfillOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillOrderRequest"> (optional)</param>
        /// <returns>ApiResponse of FulfillOrder200Response</returns>
        public ApiResponse<FulfillOrder200Response> FulfillOrderWithHttpInfo(
            FulfillOrderRequest? fulfillOrderRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fulfillOrderRequest;


            // make the HTTP request
            var localVarResponse = Client.Post<FulfillOrder200Response>("/v1/ts-sdk/orderbook/fulfillOrder",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("FulfillOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FulfillOrder200Response</returns>
        public async Task<FulfillOrder200Response> FulfillOrderAsync(FulfillOrderRequest? fulfillOrderRequest = default,
            CancellationToken cancellationToken = default)
        {
            var task = FulfillOrderWithHttpInfoAsync(fulfillOrderRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Orderbook.Client.ApiResponse<FulfillOrder200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillOrderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FulfillOrder200Response)</returns>
        public async Task<ApiResponse<FulfillOrder200Response>> FulfillOrderWithHttpInfoAsync(
            FulfillOrderRequest? fulfillOrderRequest = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fulfillOrderRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<FulfillOrder200Response>("/v1/ts-sdk/orderbook/fulfillOrder",
                localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("FulfillOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareListingRequest"> (optional)</param>
        /// <returns>PrepareListing200Response</returns>
        public PrepareListing200Response PrepareListing(PrepareListingRequest? prepareListingRequest = default)
        {
            var localVarResponse = PrepareListingWithHttpInfo(prepareListingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareListingRequest"> (optional)</param>
        /// <returns>ApiResponse of PrepareListing200Response</returns>
        public ApiResponse<PrepareListing200Response> PrepareListingWithHttpInfo(
            PrepareListingRequest? prepareListingRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = prepareListingRequest;


            // make the HTTP request
            var localVarResponse = Client.Post<PrepareListing200Response>("/v1/ts-sdk/orderbook/prepareListing",
                localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("PrepareListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrepareListing200Response</returns>
        public async Task<PrepareListing200Response> PrepareListingAsync(
            PrepareListingRequest? prepareListingRequest = default, CancellationToken cancellationToken = default)
        {
            var task = PrepareListingWithHttpInfoAsync(prepareListingRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Orderbook.Client.ApiResponse<PrepareListing200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareListingRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrepareListing200Response)</returns>
        public async Task<ApiResponse<PrepareListing200Response>> PrepareListingWithHttpInfoAsync(
            PrepareListingRequest? prepareListingRequest = default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = prepareListingRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<PrepareListing200Response>("/v1/ts-sdk/orderbook/prepareListing",
                localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("PrepareListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareOrderCancellationsRequest"> (optional)</param>
        /// <returns>PrepareOrderCancellations200Response</returns>
        public PrepareOrderCancellations200Response PrepareOrderCancellations(
            PrepareOrderCancellationsRequest? prepareOrderCancellationsRequest = default)
        {
            var localVarResponse = PrepareOrderCancellationsWithHttpInfo(prepareOrderCancellationsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareOrderCancellationsRequest"> (optional)</param>
        /// <returns>ApiResponse of PrepareOrderCancellations200Response</returns>
        public ApiResponse<PrepareOrderCancellations200Response> PrepareOrderCancellationsWithHttpInfo(
            PrepareOrderCancellationsRequest? prepareOrderCancellationsRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = prepareOrderCancellationsRequest;


            // make the HTTP request
            var localVarResponse = Client.Post<PrepareOrderCancellations200Response>(
                "/v1/ts-sdk/orderbook/prepareOrderCancellations", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("PrepareOrderCancellations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareOrderCancellationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrepareOrderCancellations200Response</returns>
        public async Task<PrepareOrderCancellations200Response> PrepareOrderCancellationsAsync(
            PrepareOrderCancellationsRequest? prepareOrderCancellationsRequest = default,
            CancellationToken cancellationToken = default)
        {
            var task = PrepareOrderCancellationsWithHttpInfoAsync(prepareOrderCancellationsRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Orderbook.Client.ApiResponse<PrepareOrderCancellations200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="prepareOrderCancellationsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrepareOrderCancellations200Response)</returns>
        public async Task<ApiResponse<PrepareOrderCancellations200Response>> PrepareOrderCancellationsWithHttpInfoAsync(
            PrepareOrderCancellationsRequest? prepareOrderCancellationsRequest = default,
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = prepareOrderCancellationsRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<PrepareOrderCancellations200Response>(
                "/v1/ts-sdk/orderbook/prepareOrderCancellations", localVarRequestOptions, Configuration,
                cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("PrepareOrderCancellations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletAddress"></param>
        /// <param name="contractAddress"></param>
        /// <returns>TokenBalance200Response</returns>
        public TokenBalance200Response TokenBalance(string walletAddress, string contractAddress)
        {
            var localVarResponse = TokenBalanceWithHttpInfo(walletAddress, contractAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletAddress"></param>
        /// <param name="contractAddress"></param>
        /// <returns>ApiResponse of TokenBalance200Response</returns>
        public ApiResponse<TokenBalance200Response> TokenBalanceWithHttpInfo(string walletAddress,
            string contractAddress)
        {
            // verify the required parameter 'walletAddress' is set
            if (walletAddress == null)
                throw new ApiException(400,
                    "Missing required parameter 'walletAddress' when calling OrderbookApi->TokenBalance");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400,
                    "Missing required parameter 'contractAddress' when calling OrderbookApi->TokenBalance");

            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("", "wallet_address", walletAddress));
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("", "contract_address", contractAddress));


            // make the HTTP request
            var localVarResponse =
                Client.Get<TokenBalance200Response>("/v1/ts-sdk/token/balance", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("TokenBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletAddress"></param>
        /// <param name="contractAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenBalance200Response</returns>
        public async Task<TokenBalance200Response> TokenBalanceAsync(string walletAddress, string contractAddress,
            CancellationToken cancellationToken = default)
        {
            var task = TokenBalanceWithHttpInfoAsync(walletAddress, contractAddress, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Orderbook.Client.ApiResponse<TokenBalance200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Orderbook.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletAddress"></param>
        /// <param name="contractAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenBalance200Response)</returns>
        public async Task<ApiResponse<TokenBalance200Response>> TokenBalanceWithHttpInfoAsync(string walletAddress,
            string contractAddress, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'walletAddress' is set
            if (walletAddress == null)
                throw new ApiException(400,
                    "Missing required parameter 'walletAddress' when calling OrderbookApi->TokenBalance");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400,
                    "Missing required parameter 'contractAddress' when calling OrderbookApi->TokenBalance");


            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("", "wallet_address", walletAddress));
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("", "contract_address", contractAddress));


            // make the HTTP request

            var task = AsynchronousClient.GetAsync<TokenBalance200Response>("/v1/ts-sdk/token/balance",
                localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("TokenBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }
    }
}