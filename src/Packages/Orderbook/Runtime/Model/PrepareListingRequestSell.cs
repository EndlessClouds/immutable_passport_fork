/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Immutable.Orderbook.Model
{
    /// <summary>
    ///     PrepareListingRequestSell
    /// </summary>
    [JsonConverter(typeof(PrepareListingRequestSellJsonConverter))]
    [DataContract(Name = "prepareListing_request_sell")]
    public class PrepareListingRequestSell : AbstractOpenAPISchema
    {
        private object _actualInstance;

        /// <summary>
        ///     Initializes a new instance of the <see cref="PrepareListingRequestSell" /> class
        ///     with the <see cref="ERC1155Item" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ERC1155Item.</param>
        public PrepareListingRequestSell(ERC1155Item actualInstance)
        {
            IsNullable = false;
            SchemaType = "oneOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="PrepareListingRequestSell" /> class
        ///     with the <see cref="ERC721Item" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ERC721Item.</param>
        public PrepareListingRequestSell(ERC721Item actualInstance)
        {
            IsNullable = false;
            SchemaType = "oneOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        ///     Gets or Sets ActualInstance
        /// </summary>
        public override object ActualInstance
        {
            get => _actualInstance;
            set
            {
                if (value.GetType() == typeof(ERC1155Item) || value is ERC1155Item)
                    _actualInstance = value;
                else if (value.GetType() == typeof(ERC721Item) || value is ERC721Item)
                    _actualInstance = value;
                else
                    throw new ArgumentException(
                        "Invalid instance found. Must be the following types: ERC1155Item, ERC721Item");
            }
        }

        /// <summary>
        ///     Get the actual instance of `ERC1155Item`. If the actual instance is not `ERC1155Item`,
        ///     the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ERC1155Item</returns>
        public ERC1155Item GetERC1155Item()
        {
            return (ERC1155Item)ActualInstance;
        }

        /// <summary>
        ///     Get the actual instance of `ERC721Item`. If the actual instance is not `ERC721Item`,
        ///     the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ERC721Item</returns>
        public ERC721Item GetERC721Item()
        {
            return (ERC721Item)ActualInstance;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrepareListingRequestSell {\n");
            sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(ActualInstance, SerializerSettings);
        }

        /// <summary>
        ///     Converts the JSON string into an instance of PrepareListingRequestSell
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of PrepareListingRequestSell</returns>
        public static PrepareListingRequestSell FromJson(string jsonString)
        {
            PrepareListingRequestSell newPrepareListingRequestSell = null;

            if (string.IsNullOrEmpty(jsonString)) return newPrepareListingRequestSell;
            var match = 0;
            var matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ERC1155Item).GetProperty("AdditionalProperties") == null)
                    newPrepareListingRequestSell =
                        new PrepareListingRequestSell(
                            JsonConvert.DeserializeObject<ERC1155Item>(jsonString, SerializerSettings));
                else
                    newPrepareListingRequestSell = new PrepareListingRequestSell(
                        JsonConvert.DeserializeObject<ERC1155Item>(jsonString, AdditionalPropertiesSerializerSettings));
                matchedTypes.Add("ERC1155Item");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                Debug.WriteLine("Failed to deserialize `{0}` into ERC1155Item: {1}", jsonString, exception);
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ERC721Item).GetProperty("AdditionalProperties") == null)
                    newPrepareListingRequestSell =
                        new PrepareListingRequestSell(
                            JsonConvert.DeserializeObject<ERC721Item>(jsonString, SerializerSettings));
                else
                    newPrepareListingRequestSell = new PrepareListingRequestSell(
                        JsonConvert.DeserializeObject<ERC721Item>(jsonString, AdditionalPropertiesSerializerSettings));
                matchedTypes.Add("ERC721Item");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                Debug.WriteLine("Failed to deserialize `{0}` into ERC721Item: {1}", jsonString, exception);
            }

            if (match == 0)
                throw new InvalidDataException("The JSON string `" + jsonString +
                                               "` cannot be deserialized into any schema defined.");
            if (match > 1)
                throw new InvalidDataException("The JSON string `" + jsonString +
                                               "` incorrectly matches more than one schema (should be exactly one match): " +
                                               string.Join(",", matchedTypes));

            // deserialization is considered successful at this point if no exception has been thrown.
            return newPrepareListingRequestSell;
        }
    }

    /// <summary>
    ///     Custom JSON converter for PrepareListingRequestSell
    /// </summary>
    public class PrepareListingRequestSellJsonConverter : JsonConverter
    {
        /// <summary>
        ///     To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)typeof(PrepareListingRequestSell).GetMethod("ToJson").Invoke(value, null));
        }

        /// <summary>
        ///     To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue,
            JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    return PrepareListingRequestSell.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return PrepareListingRequestSell.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        ///     Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }
}