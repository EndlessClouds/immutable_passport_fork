/*
 * Immutable zkEVM API
 *
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Api.ZkEvm.Client.OpenAPIDateConverter;

namespace Immutable.Api.ZkEvm.Model
{
    /// <summary>
    /// FeedItemFollowGame
    /// </summary>
    [DataContract(Name = "FeedItemFollowGame")]
    public partial class FeedItemFollowGame
    {
        /// <summary>
        /// Feed item type
        /// </summary>
        /// <value>Feed item type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Followgame for value: followgame
            /// </summary>
            [EnumMember(Value = "followgame")]
            Followgame = 1
        }


        /// <summary>
        /// Feed item type
        /// </summary>
        /// <value>Feed item type</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedItemFollowGame" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeedItemFollowGame() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedItemFollowGame" /> class.
        /// </summary>
        /// <param name="id">Feed item ID (required).</param>
        /// <param name="name">Feed item name (required).</param>
        /// <param name="questId">Quest ID (required).</param>
        /// <param name="priority">Feed item priority (required).</param>
        /// <param name="gemsEarnable">Amount of gems earnable when user completes the quest (required).</param>
        /// <param name="bypass">If the quest is bypassed, the user will not be able to see it on the feed.</param>
        /// <param name="dayZero">If the quest is a day0 quest.</param>
        /// <param name="gameId">Game ID.</param>
        /// <param name="gameName">Game name.</param>
        /// <param name="questCompletedPopupText">Text to display when the quest is completed in an onboarding experience.</param>
        /// <param name="tags">The tags for the feed item.</param>
        /// <param name="categories">The categories for the feed item.</param>
        /// <param name="onboardingExperience">The onboarding experience for the feed item.</param>
        /// <param name="type">Feed item type (required).</param>
        /// <param name="ctaImage">URL of the CTA image (required).</param>
        /// <param name="ctaLabel">Label of the CTA button (required).</param>
        /// <param name="ctaDescription">Description of the CTA button (required).</param>
        /// <param name="quizLogo">URL of the quiz logo (required).</param>
        /// <param name="videoTitle">Title of the video (required).</param>
        public FeedItemFollowGame(string id = default(string), string name = default(string), string questId = default(string), int priority = default(int), int gemsEarnable = default(int), bool bypass = default(bool), bool dayZero = default(bool), Guid gameId = default(Guid), string gameName = default(string), string questCompletedPopupText = default(string), List<string> tags = default(List<string>), List<string> categories = default(List<string>), string onboardingExperience = default(string), TypeEnum type = default(TypeEnum), string ctaImage = default(string), string ctaLabel = default(string), string ctaDescription = default(string), string quizLogo = default(string), string videoTitle = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for FeedItemFollowGame and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FeedItemFollowGame and cannot be null");
            }
            this.Name = name;
            // to ensure "questId" is required (not null)
            if (questId == null)
            {
                throw new ArgumentNullException("questId is a required property for FeedItemFollowGame and cannot be null");
            }
            this.QuestId = questId;
            this.Priority = priority;
            this.GemsEarnable = gemsEarnable;
            this.Type = type;
            // to ensure "ctaImage" is required (not null)
            if (ctaImage == null)
            {
                throw new ArgumentNullException("ctaImage is a required property for FeedItemFollowGame and cannot be null");
            }
            this.CtaImage = ctaImage;
            // to ensure "ctaLabel" is required (not null)
            if (ctaLabel == null)
            {
                throw new ArgumentNullException("ctaLabel is a required property for FeedItemFollowGame and cannot be null");
            }
            this.CtaLabel = ctaLabel;
            // to ensure "ctaDescription" is required (not null)
            if (ctaDescription == null)
            {
                throw new ArgumentNullException("ctaDescription is a required property for FeedItemFollowGame and cannot be null");
            }
            this.CtaDescription = ctaDescription;
            // to ensure "quizLogo" is required (not null)
            if (quizLogo == null)
            {
                throw new ArgumentNullException("quizLogo is a required property for FeedItemFollowGame and cannot be null");
            }
            this.QuizLogo = quizLogo;
            // to ensure "videoTitle" is required (not null)
            if (videoTitle == null)
            {
                throw new ArgumentNullException("videoTitle is a required property for FeedItemFollowGame and cannot be null");
            }
            this.VideoTitle = videoTitle;
            this.Bypass = bypass;
            this.DayZero = dayZero;
            this.GameId = gameId;
            this.GameName = gameName;
            this.QuestCompletedPopupText = questCompletedPopupText;
            this.Tags = tags;
            this.Categories = categories;
            this.OnboardingExperience = onboardingExperience;
        }

        /// <summary>
        /// Feed item ID
        /// </summary>
        /// <value>Feed item ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Feed item name
        /// </summary>
        /// <value>Feed item name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Quest ID
        /// </summary>
        /// <value>Quest ID</value>
        [DataMember(Name = "quest_id", IsRequired = true, EmitDefaultValue = true)]
        public string QuestId { get; set; }

        /// <summary>
        /// Feed item priority
        /// </summary>
        /// <value>Feed item priority</value>
        [DataMember(Name = "priority", IsRequired = true, EmitDefaultValue = true)]
        public int Priority { get; set; }

        /// <summary>
        /// Amount of gems earnable when user completes the quest
        /// </summary>
        /// <value>Amount of gems earnable when user completes the quest</value>
        [DataMember(Name = "gems_earnable", IsRequired = true, EmitDefaultValue = true)]
        public int GemsEarnable { get; set; }

        /// <summary>
        /// If the quest is bypassed, the user will not be able to see it on the feed
        /// </summary>
        /// <value>If the quest is bypassed, the user will not be able to see it on the feed</value>
        [DataMember(Name = "bypass", EmitDefaultValue = true)]
        public bool Bypass { get; set; }

        /// <summary>
        /// If the quest is a day0 quest
        /// </summary>
        /// <value>If the quest is a day0 quest</value>
        [DataMember(Name = "day_zero", EmitDefaultValue = true)]
        public bool DayZero { get; set; }

        /// <summary>
        /// Game ID
        /// </summary>
        /// <value>Game ID</value>
        [DataMember(Name = "game_id", EmitDefaultValue = false)]
        public Guid GameId { get; set; }

        /// <summary>
        /// Game name
        /// </summary>
        /// <value>Game name</value>
        [DataMember(Name = "game_name", EmitDefaultValue = false)]
        public string GameName { get; set; }

        /// <summary>
        /// Text to display when the quest is completed in an onboarding experience
        /// </summary>
        /// <value>Text to display when the quest is completed in an onboarding experience</value>
        [DataMember(Name = "quest_completed_popup_text", EmitDefaultValue = false)]
        public string QuestCompletedPopupText { get; set; }

        /// <summary>
        /// The tags for the feed item
        /// </summary>
        /// <value>The tags for the feed item</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// The categories for the feed item
        /// </summary>
        /// <value>The categories for the feed item</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// The onboarding experience for the feed item
        /// </summary>
        /// <value>The onboarding experience for the feed item</value>
        [DataMember(Name = "onboarding_experience", EmitDefaultValue = false)]
        public string OnboardingExperience { get; set; }

        /// <summary>
        /// URL of the CTA image
        /// </summary>
        /// <value>URL of the CTA image</value>
        [DataMember(Name = "cta_image", IsRequired = true, EmitDefaultValue = true)]
        public string CtaImage { get; set; }

        /// <summary>
        /// Label of the CTA button
        /// </summary>
        /// <value>Label of the CTA button</value>
        [DataMember(Name = "cta_label", IsRequired = true, EmitDefaultValue = true)]
        public string CtaLabel { get; set; }

        /// <summary>
        /// Description of the CTA button
        /// </summary>
        /// <value>Description of the CTA button</value>
        [DataMember(Name = "cta_description", IsRequired = true, EmitDefaultValue = true)]
        public string CtaDescription { get; set; }

        /// <summary>
        /// URL of the quiz logo
        /// </summary>
        /// <value>URL of the quiz logo</value>
        [DataMember(Name = "quiz_logo", IsRequired = true, EmitDefaultValue = true)]
        public string QuizLogo { get; set; }

        /// <summary>
        /// Title of the video
        /// </summary>
        /// <value>Title of the video</value>
        [DataMember(Name = "video_title", IsRequired = true, EmitDefaultValue = true)]
        public string VideoTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeedItemFollowGame {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  QuestId: ").Append(QuestId).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  GemsEarnable: ").Append(GemsEarnable).Append("\n");
            sb.Append("  Bypass: ").Append(Bypass).Append("\n");
            sb.Append("  DayZero: ").Append(DayZero).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  GameName: ").Append(GameName).Append("\n");
            sb.Append("  QuestCompletedPopupText: ").Append(QuestCompletedPopupText).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  OnboardingExperience: ").Append(OnboardingExperience).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CtaImage: ").Append(CtaImage).Append("\n");
            sb.Append("  CtaLabel: ").Append(CtaLabel).Append("\n");
            sb.Append("  CtaDescription: ").Append(CtaDescription).Append("\n");
            sb.Append("  QuizLogo: ").Append(QuizLogo).Append("\n");
            sb.Append("  VideoTitle: ").Append(VideoTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
